# -*- coding: utf-8 -*-
"""카드 거래이력 분석을 통한 고객 특성 파악.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-xda1Gmy728zOfxDjhIu5USfSbKvibsn

# 카드 거래이력 분석을 통한 고객 특성 파악

> 목차

- 프로젝트 Summary
- 문제상황
- PROCESS01
- PROCESS02
- PROCESS03

## 프로젝트 Summary
-----
> 프로젝트명

▶ 카드거래이력 분석을 통한 고객 특성 파악

> 프로젝트 유형

▶ 데이터 EDA 및 인사이트 추출

> 학습목표

▶ 데이터를 전처리할 수 있는 역량 습득
▶ 가설 수립, 데이터 핸들링을 통해 인사이트르르 추출할 수 있는 역량 습득

## 문제상황 설명
------
> 시나리오

```
A사는 신규 브랜드의 점포를 입점시키려는 계획을 갖고있으며,
신규 브랜드이기 때문에 과거 상권에 대한 정보가 없어, 어느 지역에 입점을 시켜야 할지 고민이 많다.
고민 끝에 지역B를 최종 후보로 정했지만 자신들의 브랜드와 해당 지역에 거주하는 고객의 소비성향과 비슷한지가 아직 의문!
따라서 신용카드사에서 데이터를 받아서 고객의 소비성향을 분석해보려고 한다.
```

> 문제정의

▶ 신규 브랜드 입점 상권 불분명

> 기대효과

▶ 신규 상권 입점 여부 결정 및 상권의 고객 이해

> 해결방안

▶ 카드사 데이터를 활용해 지역 거주 고객 소비성향을 파악 후 브랜드과 매칭을 통해 입점 결정

> 성과측정

▶ 신규 집입 결정 여부

> 현업적용

▶ 인사이트 Report 작성 및 보고

> 데이터 살펴보기
- 상점 ID별 카드 Spending Data
- 데이터 명세

|Store_id|date|time|card_id|amount|installments|dats_of_week|holyday|
|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|
|상점ID|날짜|시간|카드ID|매출액(음수는 거래 취소)|할부개월, 일시불은 빈문자열|요일(월요일0,일요일6)|공휴일여부|
"""

# warning 제거
import warnings
warnings.filterwarnings('ignore')

# 구글드라이브 연결
from google.colab import drive
drive.mount('/content/drive')

import os
os.chdir('/content/drive/MyDrive/파이썬 데이터분석/개인 프로젝트/카드 거래 이력 분석을 통한 고객특성 파악')
os.getcwd()

# data read
import pandas as pd
df = pd.read_csv('CARD_DATA.csv')
df.head()

"""## **🔈Process01**  
**┗ 업종별 사용 형태 분석**  
---

### · Data 전처리  
---
* 수집된 데이터의 기본 정보들을 확인  

  (1) Data shape(형태) 확인

  (2) Data type 확인

  (3) Null값 확인 (※ 빈 값의 Data)

  (4) Outlier 확인 (※ 정상적인 범주를 벗어난 Data)
"""

# data shape
print('df', df.shape)

# data type
df.info()
# date가 Object로 기록되어있음
# time도 object

# Null값 확인
print(df.isnull().sum())
#installments는 할부 안할 수도 있으니 null값이 있을 수 있지만 , 나중에 0으로 바꿔줘야지

# outlier
df.describe()

#할부개월 일시불-> 0으로 처리
df['installments'].fillna(0,inplace=True)

print(df.isnull().sum())

"""### · 업종별 이용 및 매출 비중 분석
---  
"""

# 상점 수
df['store_id'].value_counts()

# 업종별 이용 횟수 비중
df_store = pd.DataFrame(df['store_id'].value_counts()).reset_index()
df_store.columns = ['store_id','cnt']
df_store

# 업종별 이용 횟수 비중 top10
df_store['total'] = df_store['cnt'].sum()
df_store['ratio'] = round((df_store['cnt']/df_store['total'])*100, 2)
df_store.sort_values(by = 'ratio', ascending= False)

# 업종별 매출액 비중
df_amt = pd.DataFrame(df['amount'].groupby(df['store_id']).sum()).reset_index()
df_amt.sort_values(by ='amount', ascending = False)

# ▶ 업종별 매출액 비중 Top 10
df_amt['total'] = df_amt['amount'].sum()
df_amt['ratio'] = round( (df_amt['amount'] / df_amt['total']) * 100,2)
df_amt.head(10)

"""## **🔉Process02**  
**┗ 핵심 업종 탐색**  
---

### · 업종별 이용 고객수 분석
---
"""

# ▶ 상위에서 정의한 이용 비중 Data
df_store.columns = ['store_id', 'cnt', 'cnt_total', 'cnt_ratio']
df_store.head(5)

# ▶ 상위에서 정의한 이용 비중 Data
df_amt.columns = ['store_id', 'amt', 'amt_total', 'amt_ratio']
df_amt.head(5)

# data merge
df_merge = pd.merge(df_store, df_amt, how='left', on='store_id')
df_merge.head()

# 이용 고객수 (unique)
df_customer = pd.DataFrame(df['card_id'].groupby(df['store_id']).nunique()).reset_index()
df_customer.columns = ['store_id','customer']
df_customer['customer_total'] = df['card_id'].nunique()
df_customer['customer_ratio'] = round((df_customer['customer']/df_customer['customer_total'])*100,2)
df_customer.sort_values(by=['customer_ratio'], ascending = False).head(10)

# 이용 고객수 left join
df_merge = pd.merge(df_merge, df_customer, how = 'left', on = 'store_id' )
df_merge.head(5)

"""### · 1회 사용 금액 / 객단가 분석
---
"""

# 1회 사용 금액
df_merge['amt_per_use'] = round((df_merge['amt']/df_merge['cnt'])*100,2)

# 객단가
df_merge['cus_per_use'] = round((df_merge['amt']/df_merge['customer'])*100,2)

df_merge.head(5)

"""### · 핵심업종 정의
---
"""

# ▶ 이용 비중, 이용 금액 비중, 이용 고객수 비중에 가중치를 적용하여 새로운 Score를 정의
# ▶ cnt_ratio(a)
# ▶ amt_ratio(b)
# ▶ customer_ratio(c)

a = 2
b = 4
c = 4

df_merge['core_store'] = df_merge['cnt_ratio']*a + df_merge['amt_ratio']*b + df_merge['customer_ratio']*c
df_merge.sort_values(by = 'core_store', ascending = False)

# min-max표준화를 통해 100점 만점의 점수로 변환
# Scaled Value = (Original Value − Min Value) / (Max Value − Min Value)

df_merge['core_store_scaled'] = df_merge['core_store'].apply(lambda x:(x - df_merge['core_store'].min()) / df_merge['core_store'].max() - df_merge['core_store'].min())
df_merge['core_store_scaled'] = round(df_merge['core_store_scaled'] * 100,0)
df_merge.sort_values(by = 'core_store_scaled', ascending = False)

"""store 753, 1342, 0, 221, 428 / 총 5개의 store를 핵심업종으로 정의

## **🔊Process03**  
**┗ 핵심업종 추가 분석**  
---

### · 핵심업종 데이터 추출
---
"""

# store 753, 1342, 0, 221, 428 / 총 5개의 store를 핵심업종으로 정의
df.head()

df_core_store = df[df['store_id'].isin([753, 1342, 0, 221, 428])]
df_core_store.head()

"""### · 핵심업종 년도별 매출 비중 변화 분석
---
"""

# time data 처리
import datetime
df_core_store['Date_merge'] = df['date'].astype(str) + ' ' + df['time'].astype(str)
df_core_store['Date_merge'] = pd.to_datetime(df_core_store['Date_merge'])

df_core_store['Date_merge'].max(), df_core_store['Date_merge'].min()
#(Timestamp('2018-07-31 23:56:14'), Timestamp('2016-08-01 00:14:51'))
# ▶ 2016년 8월 1일 ~ 2018년 7월 31일까지의 Data

# ▶ 년, 월로 시간데이터 분해
df_core_store['year'] = df_core_store['Date_merge'].dt.year
df_core_store['month'] = df_core_store['Date_merge'].dt.month
df_core_store.head()

# 핵심 업종 별 매출금액 by 년도
df_year = pd.DataFrame(df_core_store.groupby(['store_id','year'])['amount'].sum()).reset_index()
df_year.head()

df_pivot = pd.pivot_table(df_year,              #피벗할 테이블
                          index = 'year',       #행 위치에 들어갈 열
                          columns = 'store_id', #컬럼 이름
                          values = 'amount')    #데이터로 사용할 값
df_pivot['total'] = df_pivot.iloc[:, :5].sum(axis=1)
df_pivot = df_pivot.fillna(0)
df_pivot.head()

# ▶ total 금액으로 나눠서 매출 비중으로 변환
df_pivot.iloc[:,0] = (df_pivot.iloc[:,0] / df_pivot['total'])
df_pivot.iloc[:,1] = (df_pivot.iloc[:,1] / df_pivot['total'])
df_pivot.iloc[:,2] = (df_pivot.iloc[:,2] / df_pivot['total'])
df_pivot.iloc[:,3] = (df_pivot.iloc[:,3] / df_pivot['total'])
df_pivot.iloc[:,4] = (df_pivot.iloc[:,4] / df_pivot['total'])

df_pivot

df_pivot = df_pivot.drop(['total'], axis=1)
df_pivot

import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
plt.style.use(['dark_background'])

ax = df_pivot.plot(kind='barh', stacked=True, title="years amt", rot=0);
for p in ax.patches:
    left, bottom, width, height = p.get_bbox().bounds
    ax.annotate("%.1f"%(width*100), xy=(left+width/2, bottom+height/2), ha='center', va='center', color='r');

plt.box(False)
plt.gcf().set_size_inches(10, 5)
plt.show()

"""업종 성장세와 하락세
- 0, 1342 store은 안정적 성장세
- 753, 221, 428 store은 하락세
자세한 업종을 알 수 있었다면 좀 더 정확한 분석이 가능했을텐데 아쉽다ㅜ
"""

